#SARIMAX4
import pandas as pd
from statsmodels.tsa.statespace.sarimax import SARIMAX
from pmdarima import auto_arima
from tqdm.notebook import tqdm  # Use tqdm.notebook to display progress bars in Jupyter Notebook
import time

# Load your data
df = pd.read_excel(r'C:\Users\pavel\Downloads\Forecasting\Bots\Yfinance\Sezonal2.xlsx')

# Define your target variable
y = df['y']

# Create a date range with a monthly frequency
dates = pd.date_range(start='9/04/2011', periods=len(y), freq='D')

# Assign the dates to the index of y
y.index = dates

# Use auto_arima with a limited search space
stepwise_fit = auto_arima(y, seasonal=True, m=12, max_p=4, max_d=4, max_q=4, max_P=4, max_D=4, max_Q=4)

# Print the optimal parameters
print(stepwise_fit.get_params())

# Fit a SARIMAX model using the optimal parameters
model = SARIMAX(y, order=stepwise_fit.order, seasonal_order=stepwise_fit.seasonal_order)
model_fit = model.fit(disp=False)

# Make predictions
predictions = model_fit.predict(start=len(y), end=len(y) + 100)

# Use tqdm.notebook for progress bar display in Jupyter Notebook
for i in tqdm(range(100)):
    time.sleep(0.01)
import matplotlib.pyplot as plt

# Create a date range for the forecast period
forecast_dates = pd.date_range(start=y.index[-1], periods=100, freq='D')

# Make predictions
predictions = model_fit.predict(start=len(y), end=len(y) + 100)

# Plot actuals vs. forecast
plt.figure(figsize=(14, 6))
plt.plot(y, label='Actuals')
plt.plot(forecast_dates, predictions[:len(forecast_dates)], label='Forecast', color='red')

plt.title('Actuals vs. Forecast')
plt.xlabel('Date')
plt.ylabel('Value')
plt.legend()
plt.show()
import matplotlib.pyplot as plt

# Plot diagnostic results
model_fit.plot_diagnostics(figsize=(14, 10))
plt.show()

# Use tqdm.notebook for progress bar display in Jupyter Notebook
for i in tqdm(range(100)):
    time.sleep(0.01)
import matplotlib.pyplot as plt

# Plot actuals vs. fitted values
plt.figure(figsize=(14, 6))
plt.plot(y, label='Actuals')
plt.plot(model_fit.fittedvalues, label='Fitted', color='gray')

plt.title('Actuals vs. Fitted Values')
plt.xlabel('Date')
plt.ylabel('Value')
plt.legend()
plt.show()
